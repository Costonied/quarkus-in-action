#
# Security configuration
#
# all-resources - it's our common name of oul collection of resources.
#   We could create any count of collections to configure it separately.
# /* - means all resources
# authenticated - means access to our collection of resources (all-resources) need to be authenticated
quarkus.http.auth.permission.all-resources.paths=/*
quarkus.http.auth.permission.all-resources.policy=authenticated
quarkus.oidc.logout.path=/logout
# We choose web_app as the application type to say that the preferred authentication method
# is the so-called Authorization Code Flow, which means that Quarkus redirects any unauthenticated
# request to the Keycloak URL that allow the user to authenticate.
# The other possible type is service, which we would generally use for applications that are a set of HTTP (REST)
# resources rather than a web application, and in this case,
# the preferred authentication mode would be using the Authorization HTTP header.
quarkus.oidc.application-type=web_app
quarkus.keycloak.devservices.shared=true
#
# Wire module with Keycloak in production mode
#
%prod.quarkus.oidc.auth-server-url=http://localhost:7777/realms/car-rental
%prod.quarkus.oidc.client-id=users-service
# The quarkus.oidc.token-state-manager.split-tokens is most likely necessary in prod mode,
# because the security realm is configured in a way that the total size of session cookies
# might exceed 4 kilobytes (a session cookie contains three encrypted tokens - ID, access and refresh).
# Some browsers might decide to ignore such cookies, and thus authentication would not work.
# With this property enabled, Quarkus will split the authentication cookie into three separate cookies,
# one for each of the mentioned tokens.
# In dev mode, the generated security realm is configured to use smaller tokens.
%prod.quarkus.oidc.token-state-manager.split-tokens=true