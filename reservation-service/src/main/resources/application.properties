quarkus.http.port=8081
# Change default (8081) test port to another order to not clash it
quarkus.http.test-port=8181
quarkus.smallrye-graphql-client.inventory.url=http://localhost:8083/graphql
#
# Security configuration
#
# For simplicity's sake, in this case, we didn't make the authentication mandatory
# (we did that in the Users service),
# so there are no quarkus.http.auth.permission.* properties.
# We develop the Reservation service in a way that allows anonymous access.
# If there is no Authorization header on incoming requests,
# they will be allowed to go through, but the security context will be empty.
# Thanks to this simplification, you can still call the service's REST endpoints
# without obtaining and passing an authentication token.
#
# means that the application is a set of RESTful HTTP resources,
# so the preferred authentication method is the use of the Authorization HTTP header, rather than a browser cookie
quarkus.oidc.application-type=service
# Use shared Keycloak with users-service module in Dev mode
quarkus.keycloak.devservices.shared=true
#
# Wire module with Keycloak in production mode
#
%prod.quarkus.oidc.auth-server-url=http://localhost:7777/realms/car-rental
%prod.quarkus.oidc.client-id=reservation-service
# The quarkus.oidc.token-state-manager.split-tokens is most likely necessary in prod mode,
# because the security realm is configured in a way that the total size of session cookies
# might exceed 4 kilobytes (a session cookie contains three encrypted tokens - ID, access and refresh).
# Some browsers might decide to ignore such cookies, and thus authentication would not work.
# With this property enabled, Quarkus will split the authentication cookie into three separate cookies,
# one for each of the mentioned tokens.
# In dev mode, the generated security realm is configured to use smaller tokens.
%prod.quarkus.oidc.token-state-manager.split-tokens=true